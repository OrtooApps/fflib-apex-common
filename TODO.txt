Licenses that are needed with the source code and binary:
* fflib - https://github.com/apex-enterprise-patterns/fflib-apex-common/blob/master/LICENSE
* fflib apex extensions - https://github.com/wimvelzeboer/fflib-apex-extensions/blob/main/LICENSE
* Amoss - https://github.com/bobalicious/amoss/blob/main/LICENSE
* SObject Fabricator - https://github.com/bobalicious/SObjectFabricator/blob/master/LICENSE

TODO:
* Watch recording of the UI for notifications


SObject Fabricator:
    * Test opportunity, opportunity line item, product, pricebook, pricebook entry?



    * Look at subclasses for specific objects
        * Setting default values
    * Setting default parents
        * Object register
    * Persisting the result

Look at the use of 'MockDatabase' in fflib

* To finalise the core architecture:
    * Decide on FLS standards
    * Do we need to have a non all-or-nothing version of commitWork?

Add reference to disabling individual trigger events in tests:
    https://andyinthecloud.com/2016/04/13/disabling-trigger-events-in-apex-enterprise-patterns/

Add to Framework plan
    * Ability to configure different factory mappings per user / permission set / custom permission / whatever

Add to documentation
    * Wrapping exceptions on the way out of services
    * Query builder - add it to the architectural diagram - after more investigation

    DmlServices documentation:
        * Show how to tie the validator into an action
        * Note that the actions should
        * Actions can reference Validators
        * Cannot reference SOQL - they are excuted in a loop
        * Do not do domain logic in them

    * Using the Mock Registarar
    * Describe the Application Factories

From Utilities, things that may be useful:
* getReferenceObjectAPIName
* getObjName - get the object name from an Id
* getLabel / getObjectLabel - get the label for an sobject
* getFieldLabel
* delimitedStringToSet and reverse
    * escaping single quotes - in both directions?
* unitsBetweenDateTime
* emailAddressIsValid / emailAddressListIsValid
* sObjectIsCustom / sObjectIsCustomfromAPIName
* IsfieldFilterable
* isFieldCustom
* idIsValid
* getCrossObjectAPIName
* objectFieldExist
* sortSelectOptions - complete re-write

Write tests for the SOQL generation in the criteria library

Amoss_Asserts.assertContains improvement into the OS lib
New Amoss_Asserts into the OS Lib

Bring in Stack from Q-assign?
Review Utilities in q-assign - is anything else useful?



* Document a few of the oddities on the Assignment Group and Action that need to be resolved.


Bad Smells - strung out calls to describe methods - put them into SobjectUtils


* Build some example unit tests...
* Criteria extension
    * Build a simple SearchFilter SOQL generator / Selector

* Question: How do we generically tie in the QueryHandler?  Should we?  How often is this currently used?
* Question: Standard - never instantiate a Domain within a loop

* Question: How do we handle Constants - where are they defined?
* Question: How do we handle Exceptions:
* Question: How do we handle FLS - what are the rules?

    * Where are they defined?
    * Do we want to pass a single type of exception (e.g. ServiceException back to the client)?
    * Do we handle individual types of exception in the Service?
    * Do we pass any of the domain exceptions back

* Question: Multiple Apps...  maybe

* Question: Can we generate a class diagram from a body of code
* Question: All or nothing on fflib

* Question: Do you need Heap size management rules -


* Produce test-case for lack of clickthrough and raise bug on VSCode

* How do we handle constants?

* Dynamic building of the Unit Of Work for processing data

Standards?
* Selector name - singular or plural?
* When you have a class that wraps Sobject, what are the naming convensions - which one is called 'xxxObject'?
* Creating a service that performs DML - always provide an unwrapped version that takes a UOW
* Interfaces start with an I

Notes:
* Services should always be designed by seniors - at least which services exist

What's missing:
* Custom metadata driven execution of trigger code (register multiple trigger handlers)
* How does QueryHandler drop into this? - Maintenance of change of state